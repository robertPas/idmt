/* The following code was generated by JFlex 1.4.3 on 3/29/12 10:21 AM */

/*
 * IBM Corporation
 * Author: vikram.khatri@us.ibm.com
 * 
 */
package ibm.lexer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/29/12 10:21 AM from the specification file
 * <tt>C:/DB2DWB/IDMT/src/ibm/jflex/IDb2PlSql.lex</tt>
 */
final class IDb2PlSqlLexer extends DefaultLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\50\1\53"+
    "\1\17\1\53\1\7\1\53\1\0\1\20\1\43\1\44\1\5\1\16"+
    "\1\53\1\6\1\14\1\4\1\11\11\12\1\53\1\40\1\53\1\53"+
    "\1\53\1\53\1\53\1\24\1\35\1\22\1\37\1\15\1\13\1\32"+
    "\1\23\1\36\1\7\1\52\1\30\1\47\1\31\1\41\1\46\1\7"+
    "\1\25\1\33\1\26\1\34\1\51\1\42\1\45\2\7\1\53\1\21"+
    "\1\53\1\0\1\27\1\0\1\24\1\35\1\22\1\37\1\15\1\13"+
    "\1\32\1\23\1\36\1\7\1\52\1\30\1\47\1\31\1\41\1\46"+
    "\1\7\1\25\1\33\1\26\1\34\1\51\1\42\1\45\2\7\1\53"+
    "\1\53\1\53\1\53\41\10\2\0\4\7\4\0\1\7\2\0\1\10"+
    "\7\0\1\7\4\0\1\7\5\0\27\7\1\0\37\7\1\0\u013f\7"+
    "\31\0\162\7\4\0\14\7\16\0\5\7\11\0\1\7\21\0\130\10"+
    "\5\0\23\10\12\0\1\7\13\0\1\7\1\0\3\7\1\0\1\7"+
    "\1\0\24\7\1\0\54\7\1\0\46\7\1\0\5\7\4\0\202\7"+
    "\1\0\4\10\3\0\105\7\1\0\46\7\2\0\2\7\6\0\20\7"+
    "\41\0\46\7\2\0\1\7\7\0\47\7\11\0\21\10\1\0\27\10"+
    "\1\0\3\10\1\0\1\10\1\0\2\10\1\0\1\10\13\0\33\7"+
    "\5\0\3\7\15\0\4\10\14\0\6\10\13\0\32\7\5\0\13\7"+
    "\16\10\7\0\12\10\4\0\2\7\1\10\143\7\1\0\1\7\10\10"+
    "\1\0\6\10\2\7\2\10\1\0\4\10\2\7\12\10\3\7\2\0"+
    "\1\7\17\0\1\10\1\7\1\10\36\7\33\10\2\0\3\7\60\0"+
    "\46\7\13\10\1\7\u014f\0\3\10\66\7\2\0\1\10\1\7\20\10"+
    "\2\0\1\7\4\10\3\0\12\7\2\10\2\0\12\10\21\0\3\10"+
    "\1\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7"+
    "\3\0\4\7\2\0\1\10\1\7\7\10\2\0\2\10\2\0\3\10"+
    "\11\0\1\10\4\0\2\7\1\0\3\7\2\10\2\0\12\10\4\7"+
    "\15\0\3\10\1\0\6\7\4\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\2\7\1\0\2\7\2\0\1\10\1\0\5\10"+
    "\4\0\2\10\2\0\3\10\13\0\4\7\1\0\1\7\7\0\14\10"+
    "\3\7\14\0\3\10\1\0\11\7\1\0\3\7\1\0\26\7\1\0"+
    "\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7\10\10\1\0"+
    "\3\10\1\0\3\10\2\0\1\7\17\0\2\7\2\10\2\0\12\10"+
    "\1\0\1\7\17\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7"+
    "\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10\1\7\6\10"+
    "\3\0\2\10\2\0\3\10\10\0\2\10\4\0\2\7\1\0\3\7"+
    "\4\0\12\10\1\0\1\7\20\0\1\10\1\7\1\0\6\7\3\0"+
    "\3\7\1\0\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0"+
    "\2\7\3\0\3\7\3\0\10\7\1\0\3\7\4\0\5\10\3\0"+
    "\3\10\1\0\4\10\11\0\1\10\17\0\11\10\11\0\1\7\7\0"+
    "\3\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0"+
    "\5\7\4\0\7\10\1\0\3\10\1\0\4\10\7\0\2\10\11\0"+
    "\2\7\4\0\12\10\22\0\2\10\1\0\10\7\1\0\3\7\1\0"+
    "\27\7\1\0\12\7\1\0\5\7\2\0\1\10\1\7\7\10\1\0"+
    "\3\10\1\0\4\10\7\0\2\10\7\0\1\7\1\0\2\7\4\0"+
    "\12\10\22\0\2\10\1\0\10\7\1\0\3\7\1\0\27\7\1\0"+
    "\20\7\4\0\6\10\2\0\3\10\1\0\4\10\11\0\1\10\10\0"+
    "\2\7\4\0\12\10\22\0\2\10\1\0\22\7\3\0\30\7\1\0"+
    "\11\7\1\0\1\7\2\0\7\7\3\0\1\10\4\0\6\10\1\0"+
    "\1\10\1\0\10\10\22\0\2\10\15\0\60\7\1\10\2\7\7\10"+
    "\4\0\10\7\10\10\1\0\12\10\47\0\2\7\1\0\1\7\2\0"+
    "\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7\1\0"+
    "\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7\1\10"+
    "\2\7\6\10\1\0\2\10\1\7\2\0\5\7\1\0\1\7\1\0"+
    "\6\10\2\0\12\10\2\0\2\7\42\0\1\7\27\0\2\10\6\0"+
    "\12\10\13\0\1\10\1\0\1\10\1\0\1\10\4\0\2\10\10\7"+
    "\1\0\42\7\6\0\24\10\1\0\2\10\4\7\4\0\10\10\1\0"+
    "\44\10\11\0\1\10\71\0\42\7\1\0\5\7\1\0\2\7\1\0"+
    "\7\10\3\0\4\10\6\0\12\10\6\0\6\7\4\10\106\0\46\7"+
    "\12\0\51\7\7\0\132\7\5\0\104\7\5\0\122\7\6\0\7\7"+
    "\1\0\77\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7"+
    "\1\0\4\7\2\0\47\7\1\0\1\7\1\0\4\7\2\0\37\7"+
    "\1\0\1\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7"+
    "\2\0\7\7\1\0\7\7\1\0\27\7\1\0\37\7\1\0\1\7"+
    "\1\0\4\7\2\0\7\7\1\0\47\7\1\0\23\7\16\0\11\10"+
    "\56\0\125\7\14\0\u026c\7\2\0\10\7\12\0\32\7\5\0\113\7"+
    "\3\0\3\7\17\0\15\7\1\0\4\7\3\10\13\0\22\7\3\10"+
    "\13\0\22\7\2\10\14\0\15\7\1\0\3\7\1\0\2\10\14\0"+
    "\64\7\40\10\3\0\1\7\3\0\2\7\1\10\2\0\12\10\41\0"+
    "\3\10\2\0\12\10\6\0\130\7\10\0\51\7\1\10\126\0\35\7"+
    "\3\0\14\10\4\0\14\10\12\0\12\10\36\7\2\0\5\7\u038b\0"+
    "\154\7\224\0\234\7\4\0\132\7\6\0\26\7\2\0\6\7\2\0"+
    "\46\7\2\0\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0"+
    "\1\7\1\0\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0"+
    "\3\7\1\0\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0"+
    "\3\7\1\0\7\7\17\0\4\10\32\0\5\10\20\0\2\7\23\0"+
    "\1\7\13\0\4\10\6\0\6\10\1\0\1\7\15\0\1\7\40\0"+
    "\22\7\36\0\15\10\4\0\1\10\3\0\6\10\27\0\1\7\4\0"+
    "\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\1\0\3\7\1\0\7\7\3\0"+
    "\3\7\5\0\5\7\26\0\44\7\u0e81\0\3\7\31\0\11\7\6\10"+
    "\1\0\5\7\2\0\5\7\4\0\126\7\2\0\2\10\2\0\3\7"+
    "\1\0\137\7\5\0\50\7\4\0\136\7\21\0\30\7\70\0\20\7"+
    "\u0200\0\u19b6\7\112\0\u51a6\7\132\0\u048d\7\u0773\0\u2ba4\7\u215c\0\u012e\7"+
    "\2\0\73\7\225\0\7\7\14\0\5\7\5\0\1\7\1\10\12\7"+
    "\1\0\15\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7"+
    "\3\0\20\10\20\0\4\10\17\0\2\7\30\0\3\7\31\0\1\7"+
    "\6\0\5\7\1\0\207\7\2\0\1\10\4\0\1\7\13\0\12\10"+
    "\7\0\32\7\4\0\1\7\1\0\32\7\12\0\132\7\3\0\6\7"+
    "\2\0\6\7\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7"+
    "\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\3\4\1\5\2\6\1\4"+
    "\1\1\1\4\16\5\1\7\1\0\1\10\1\0\1\6"+
    "\4\0\1\11\16\5\1\12\2\5\2\0\2\10\2\0"+
    "\1\13\20\5\1\0\1\10\6\5\3\0\10\5\1\0"+
    "\2\5\1\0\3\5\1\14\1\0\12\5\1\0\2\5"+
    "\1\14\6\5\1\0\10\5\1\0\2\5\2\0\3\5"+
    "\1\0\1\5\1\0\1\5\3\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\12\1\14\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\2\0\1\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\130\0\260\0\334\0\130"+
    "\0\u0108\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\334\0\u04a4\0\u04d0"+
    "\0\u0160\0\130\0\u04fc\0\u0528\0\u0554\0\u0210\0\130\0\u0580"+
    "\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0"+
    "\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u0134\0\u07e8\0\u0814"+
    "\0\u0840\0\u086c\0\u0898\0\130\0\u08c4\0\u08f0\0\130\0\u091c"+
    "\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8\0\u0a24\0\u0a50\0\u0a7c"+
    "\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0\0\u0bdc"+
    "\0\u0840\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10"+
    "\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70"+
    "\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0"+
    "\0\u0ffc\0\130\0\u1028\0\u1054\0\u1080\0\u10ac\0\u10d8\0\u1104"+
    "\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264"+
    "\0\u0134\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398"+
    "\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8"+
    "\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658"+
    "\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8"+
    "\0\u17e4\0\u1810\0\u183c\0\u1868\0\130\0\u178c\0\u1894\0\u18c0"+
    "\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\u19c8\0\u19f4\0\u1a20"+
    "\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc\0\u1b28\0\u1b54\0\u1b80"+
    "\0\u1bac\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c\0\u1c88\0\u1cb4\0\u1ce0"+
    "\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u1dbc\0\u1de8\0\u1e14\0\u1e40"+
    "\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c\0\u1f48\0\u1f74\0\u1fa0"+
    "\0\u1fcc\0\u1ff8\0\u2024\0\u2050\0\u207c\0\u20a8\0\u20d4\0\u2100"+
    "\0\u212c\0\u2158\0\u2184\0\u21b0\0\u21dc\0\u2208\0\u2234\0\u2260"+
    "\0\u228c\0\u22b8\0\u22e4\0\u2310\0\u233c\0\u2368\0\u2394\0\u23c0"+
    "\0\u23ec\0\u2418\0\u2444\0\u2470\0\u249c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\3\1\13\1\14\1\12\1\15\1\12\1\10\1\16"+
    "\1\17\1\3\1\20\1\12\1\21\1\22\1\23\2\12"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\10"+
    "\1\33\1\12\2\10\1\12\1\34\1\12\1\6\1\35"+
    "\1\12\1\10\1\3\1\4\1\5\1\6\1\36\1\10"+
    "\1\11\1\12\1\3\1\13\1\14\1\12\1\15\1\12"+
    "\1\10\1\16\1\17\1\3\1\20\1\12\1\21\1\22"+
    "\1\23\2\12\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\10\1\33\1\12\2\10\1\12\1\34\1\12"+
    "\1\6\1\35\1\12\1\10\56\0\1\5\54\0\1\6"+
    "\44\0\1\6\10\0\1\37\54\0\1\40\54\0\5\12"+
    "\1\0\1\12\4\0\16\12\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\12\0\2\41\1\42\1\43\1\44\47\0"+
    "\2\14\1\42\1\43\1\44\47\0\2\43\41\0\1\45"+
    "\2\0\14\45\1\0\1\45\1\0\32\45\1\46\2\0"+
    "\15\46\1\47\1\0\32\46\7\0\5\12\1\0\1\12"+
    "\4\0\1\12\1\50\1\12\1\51\12\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\4\12\1\52\1\0"+
    "\1\12\4\0\16\12\1\0\2\12\2\0\3\12\1\0"+
    "\2\12\10\0\5\12\1\0\1\53\4\0\16\12\1\0"+
    "\1\54\1\12\2\0\3\12\1\0\2\12\10\0\5\12"+
    "\1\0\1\12\4\0\3\12\1\55\12\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\5\12\1\0\1\12"+
    "\4\0\16\12\1\0\1\56\1\12\2\0\3\12\1\0"+
    "\2\12\10\0\5\12\1\0\1\57\4\0\16\12\1\0"+
    "\2\12\2\0\3\12\1\0\2\12\10\0\5\12\1\0"+
    "\1\12\4\0\12\12\1\60\3\12\1\0\2\12\2\0"+
    "\3\12\1\0\2\12\10\0\5\12\1\0\1\12\4\0"+
    "\16\12\1\0\2\12\2\0\1\12\1\61\1\12\1\0"+
    "\2\12\10\0\5\12\1\0\1\62\4\0\16\12\1\0"+
    "\2\12\2\0\3\12\1\0\2\12\10\0\4\12\1\63"+
    "\1\0\1\12\4\0\7\12\1\64\6\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\5\12\1\0\1\65"+
    "\4\0\16\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\10\0\5\12\1\0\1\12\4\0\3\12\1\66\3\12"+
    "\1\66\6\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\10\0\5\12\1\0\1\12\4\0\16\12\1\0\1\67"+
    "\1\12\2\0\3\12\1\0\2\12\10\0\5\12\1\0"+
    "\1\12\4\0\14\12\1\70\1\12\1\0\2\12\2\0"+
    "\3\12\1\0\2\12\1\0\5\71\1\72\46\71\1\40"+
    "\1\73\1\74\51\40\11\0\2\43\1\42\1\0\1\44"+
    "\44\0\1\75\2\0\2\76\3\0\1\75\35\0\1\45"+
    "\2\0\14\45\1\77\1\45\1\0\32\45\7\0\5\12"+
    "\1\0\1\12\4\0\2\12\1\100\13\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\5\12\1\0\1\101"+
    "\4\0\16\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\10\0\5\12\1\0\1\12\4\0\4\12\1\102\11\12"+
    "\1\0\2\12\2\0\3\12\1\0\2\12\10\0\5\12"+
    "\1\0\1\12\4\0\16\12\1\0\2\12\2\0\1\12"+
    "\1\103\1\12\1\0\2\12\10\0\5\12\1\0\1\12"+
    "\4\0\6\12\1\104\7\12\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\10\0\5\12\1\0\1\12\4\0\14\12"+
    "\1\105\1\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\10\0\5\12\1\0\1\12\4\0\16\12\1\0\1\12"+
    "\1\106\2\0\3\12\1\0\2\12\10\0\5\12\1\0"+
    "\1\12\4\0\4\12\1\107\11\12\1\0\2\12\2\0"+
    "\3\12\1\0\2\12\10\0\5\12\1\0\1\12\4\0"+
    "\13\12\1\110\2\12\1\0\2\12\2\0\3\12\1\0"+
    "\2\12\10\0\5\12\1\0\1\12\4\0\15\12\1\101"+
    "\1\0\2\12\2\0\3\12\1\0\2\12\10\0\4\12"+
    "\1\111\1\0\1\12\4\0\16\12\1\0\2\12\2\0"+
    "\3\12\1\0\2\12\10\0\5\12\1\0\1\12\4\0"+
    "\7\12\1\112\6\12\1\0\2\12\2\0\3\12\1\0"+
    "\2\12\10\0\5\12\1\0\1\12\4\0\11\12\1\113"+
    "\4\12\1\0\2\12\2\0\3\12\1\0\2\12\10\0"+
    "\5\12\1\0\1\12\4\0\1\114\5\12\1\115\7\12"+
    "\1\0\2\12\2\0\3\12\1\0\2\12\10\0\5\12"+
    "\1\0\1\12\4\0\11\12\1\116\4\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\5\12\1\0\1\117"+
    "\4\0\16\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\1\0\5\71\1\120\52\71\1\121\1\120\46\71\2\0"+
    "\1\74\62\0\2\76\52\0\2\76\1\42\47\0\5\12"+
    "\1\0\1\12\4\0\3\12\1\122\12\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\5\12\1\0\1\12"+
    "\4\0\2\12\1\123\13\12\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\10\0\5\12\1\0\1\124\4\0\16\12"+
    "\1\0\2\12\2\0\3\12\1\0\2\12\10\0\5\12"+
    "\1\0\1\12\4\0\6\12\1\125\7\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\5\12\1\0\1\12"+
    "\4\0\6\12\1\126\7\12\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\10\0\5\12\1\0\1\12\4\0\10\12"+
    "\1\127\5\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\2\0\3\130\3\0\5\12\1\0\1\12\4\0\16\12"+
    "\1\0\2\12\1\131\1\0\3\12\1\130\2\12\2\0"+
    "\3\132\3\0\5\12\1\0\1\12\4\0\15\12\1\133"+
    "\1\0\2\12\2\0\3\12\1\132\2\12\10\0\5\12"+
    "\1\0\1\12\4\0\11\12\1\134\4\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\5\12\1\0\1\12"+
    "\4\0\16\12\1\0\1\135\1\12\2\0\3\12\1\0"+
    "\2\12\10\0\5\12\1\0\1\12\4\0\12\12\1\136"+
    "\3\12\1\0\2\12\2\0\3\12\1\0\2\12\10\0"+
    "\5\12\1\0\1\137\4\0\4\12\1\140\11\12\1\0"+
    "\2\12\2\0\3\12\1\0\2\12\10\0\5\12\1\0"+
    "\1\12\4\0\6\12\1\141\7\12\1\0\2\12\2\0"+
    "\3\12\1\0\2\12\10\0\5\12\1\0\1\123\4\0"+
    "\16\12\1\0\2\12\2\0\3\12\1\0\2\12\10\0"+
    "\5\12\1\0\1\12\4\0\14\12\1\142\1\12\1\0"+
    "\2\12\2\0\3\12\1\0\2\12\10\0\5\12\1\0"+
    "\1\12\4\0\16\12\1\0\1\12\1\66\2\0\3\12"+
    "\1\0\2\12\1\0\4\71\1\74\1\120\46\71\1\0"+
    "\3\143\3\0\5\12\1\0\1\12\4\0\2\12\1\144"+
    "\2\12\1\145\10\12\1\0\2\12\1\146\1\0\3\12"+
    "\1\143\2\12\10\0\5\12\1\0\1\12\4\0\4\12"+
    "\1\147\11\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\10\0\5\12\1\0\1\12\4\0\3\12\1\66\12\12"+
    "\1\0\2\12\2\0\3\12\1\0\2\12\10\0\5\12"+
    "\1\0\1\12\4\0\2\12\1\150\13\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\5\12\1\0\1\12"+
    "\4\0\13\12\1\151\2\12\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\10\0\5\12\1\0\1\12\4\0\10\12"+
    "\1\102\5\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\2\0\3\130\37\0\1\131\4\0\1\130\4\0\3\131"+
    "\40\0\1\152\3\0\1\131\4\0\3\132\33\0\1\153"+
    "\10\0\1\132\12\0\5\12\1\0\1\12\4\0\14\12"+
    "\1\154\1\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\10\0\5\12\1\0\1\12\4\0\4\12\1\155\11\12"+
    "\1\0\2\12\2\0\3\12\1\0\2\12\10\0\5\12"+
    "\1\0\1\12\4\0\3\12\1\147\12\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\5\12\1\0\1\12"+
    "\4\0\6\12\1\156\7\12\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\10\0\5\12\1\0\1\12\4\0\3\12"+
    "\1\157\12\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\10\0\5\12\1\0\1\160\4\0\16\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\5\12\1\0\1\12"+
    "\4\0\2\12\1\161\13\12\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\10\0\5\12\1\0\1\12\4\0\4\12"+
    "\1\162\11\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\2\0\3\143\37\0\1\146\4\0\1\143\12\0\5\12"+
    "\1\0\1\12\4\0\1\163\15\12\1\0\2\12\2\0"+
    "\3\12\1\0\2\12\10\0\5\12\1\0\1\12\4\0"+
    "\6\12\1\164\7\12\1\0\2\12\2\0\3\12\1\0"+
    "\2\12\1\0\44\146\1\152\7\146\7\0\5\12\1\0"+
    "\1\66\4\0\16\12\1\0\2\12\2\0\3\12\1\0"+
    "\2\12\10\0\5\12\1\0\1\12\4\0\1\147\15\12"+
    "\1\0\2\12\2\0\3\12\1\0\2\12\10\0\5\12"+
    "\1\0\1\12\4\0\2\12\1\165\13\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\37\0\1\166\24\0\5\12"+
    "\1\0\1\12\4\0\2\12\1\167\13\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\5\12\1\0\1\12"+
    "\4\0\3\12\1\170\12\12\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\10\0\5\12\1\0\1\12\4\0\6\12"+
    "\1\171\7\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\10\0\5\12\1\0\1\12\4\0\4\12\1\66\11\12"+
    "\1\0\2\12\2\0\3\12\1\0\2\12\10\0\5\12"+
    "\1\0\1\12\4\0\2\12\1\172\13\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\5\12\1\0\1\12"+
    "\4\0\3\12\1\173\12\12\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\10\0\5\12\1\0\1\12\4\0\14\12"+
    "\1\174\1\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\10\0\5\12\1\0\1\12\4\0\4\12\1\175\11\12"+
    "\1\0\2\12\2\0\3\12\1\0\2\12\10\0\5\12"+
    "\1\0\1\176\4\0\16\12\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\10\0\5\12\1\0\1\12\4\0\1\177"+
    "\15\12\1\0\2\12\2\0\3\12\1\0\2\12\25\0"+
    "\1\200\36\0\5\12\1\0\1\12\4\0\10\12\1\201"+
    "\5\12\1\0\2\12\2\0\3\12\1\0\2\12\10\0"+
    "\5\12\1\0\1\12\4\0\14\12\1\202\1\12\1\0"+
    "\2\12\2\0\3\12\1\0\2\12\10\0\5\12\1\0"+
    "\1\12\4\0\15\12\1\203\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\10\0\5\12\1\0\1\204\4\0\16\12"+
    "\1\0\2\12\2\0\3\12\1\0\2\12\10\0\5\12"+
    "\1\0\1\12\4\0\16\12\1\0\1\205\1\12\2\0"+
    "\3\12\1\0\2\12\10\0\5\12\1\0\1\206\4\0"+
    "\16\12\1\0\2\12\2\0\3\12\1\0\2\12\10\0"+
    "\5\12\1\0\1\12\4\0\7\12\1\207\6\12\1\0"+
    "\2\12\2\0\3\12\1\0\2\12\10\0\5\12\1\0"+
    "\1\12\4\0\16\12\1\0\2\12\2\0\3\12\1\0"+
    "\1\12\1\210\33\0\1\211\30\0\5\12\1\0\1\12"+
    "\4\0\7\12\1\212\6\12\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\10\0\5\12\1\0\1\12\4\0\7\12"+
    "\1\213\6\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\10\0\5\12\1\0\1\12\4\0\16\12\1\0\2\12"+
    "\2\0\3\12\1\214\2\12\1\0\7\215\5\204\1\215"+
    "\1\204\4\215\16\204\1\152\2\204\2\215\3\204\1\215"+
    "\2\204\1\215\7\0\5\12\1\0\1\12\4\0\7\12"+
    "\1\216\6\12\1\0\2\12\2\0\3\12\1\0\2\12"+
    "\10\0\5\12\1\0\1\12\4\0\3\12\1\217\12\12"+
    "\1\0\2\12\2\0\3\12\1\0\2\12\10\0\5\12"+
    "\1\0\1\12\4\0\10\12\1\220\5\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\2\0\3\221\3\0\5\12"+
    "\1\0\1\12\4\0\4\12\1\222\11\12\1\0\2\12"+
    "\2\0\3\12\1\221\2\12\32\0\1\223\31\0\5\12"+
    "\1\0\1\12\4\0\16\12\1\0\1\224\1\12\2\0"+
    "\3\12\1\0\2\12\10\0\5\12\1\0\1\12\4\0"+
    "\10\12\1\171\5\12\1\0\2\12\2\0\3\12\1\0"+
    "\2\12\42\0\1\225\12\0\40\215\1\152\13\215\1\0"+
    "\3\226\3\0\5\12\1\0\1\12\4\0\16\12\1\0"+
    "\2\12\1\227\1\0\3\12\1\226\2\12\10\0\5\12"+
    "\1\0\1\12\4\0\5\12\1\145\10\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\10\0\5\12\1\0\1\12"+
    "\4\0\4\12\1\230\11\12\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\2\0\3\221\22\0\1\231\21\0\1\221"+
    "\12\0\5\12\1\0\1\12\4\0\16\12\1\0\1\232"+
    "\1\12\2\0\3\12\1\0\2\12\42\0\1\233\21\0"+
    "\5\12\1\0\1\12\4\0\11\12\1\234\4\12\1\0"+
    "\2\12\2\0\3\12\1\0\2\12\14\0\1\235\41\0"+
    "\3\226\37\0\1\227\4\0\1\226\3\0\2\227\1\0"+
    "\41\227\1\236\7\227\7\0\5\12\1\0\1\12\4\0"+
    "\1\12\1\171\14\12\1\0\2\12\2\0\3\12\1\0"+
    "\2\12\42\0\1\237\13\0\3\237\3\0\5\12\1\0"+
    "\1\12\4\0\11\12\1\240\4\12\1\0\2\12\2\0"+
    "\3\12\1\237\2\12\34\0\1\241\27\0\5\12\1\0"+
    "\1\12\4\0\4\12\1\242\11\12\1\0\2\12\2\0"+
    "\3\12\1\0\2\12\2\0\3\237\27\0\1\243\14\0"+
    "\1\237\12\0\5\12\1\0\1\12\4\0\2\12\1\244"+
    "\13\12\1\0\2\12\2\0\3\12\1\0\2\12\27\0"+
    "\1\245\34\0\5\12\1\0\1\12\4\0\14\12\1\246"+
    "\1\12\1\0\2\12\2\0\3\12\1\0\2\12\25\0"+
    "\1\247\36\0\5\12\1\0\1\12\4\0\16\12\1\0"+
    "\2\12\2\0\3\12\1\0\1\250\1\12\37\0\1\251"+
    "\24\0\5\12\1\0\1\12\4\0\1\252\15\12\1\0"+
    "\2\12\2\0\3\12\1\0\2\12\52\0\1\253\11\0"+
    "\5\12\1\0\1\254\4\0\16\12\1\0\2\12\2\0"+
    "\3\12\1\0\2\12\23\0\1\255\40\0\5\12\1\0"+
    "\1\12\4\0\11\12\1\256\4\12\1\0\2\12\2\0"+
    "\3\12\1\0\2\12\16\0\1\257\45\0\5\12\1\0"+
    "\1\12\4\0\16\12\1\0\2\12\2\0\1\12\1\260"+
    "\1\12\1\0\2\12\34\0\1\261\21\0\3\261\3\0"+
    "\5\12\1\0\1\262\4\0\16\12\1\0\2\12\2\0"+
    "\3\12\1\261\2\12\47\0\1\263\14\0\5\12\1\0"+
    "\1\12\4\0\16\12\1\0\1\264\1\12\2\0\3\12"+
    "\1\0\2\12\2\0\3\261\11\0\1\265\32\0\1\261"+
    "\12\0\5\12\1\0\1\12\4\0\16\12\1\0\2\12"+
    "\2\0\1\266\2\12\1\0\2\12\42\0\1\267\21\0"+
    "\5\12\1\0\1\12\4\0\14\12\1\270\1\12\1\0"+
    "\2\12\2\0\3\12\1\0\2\12\46\0\1\271\15\0"+
    "\5\12\1\0\1\12\4\0\1\272\15\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\37\0\1\273\24\0\5\12"+
    "\1\0\1\12\4\0\7\12\1\157\6\12\1\0\2\12"+
    "\2\0\3\12\1\0\2\12\23\0\1\274\40\0\5\12"+
    "\1\0\1\275\4\0\16\12\1\0\2\12\2\0\3\12"+
    "\1\0\2\12\32\0\1\276\37\0\1\277\45\0\5\12"+
    "\1\0\1\12\4\0\16\12\1\0\2\12\2\0\1\12"+
    "\1\300\1\12\1\0\2\12\27\0\1\235\73\0\1\301"+
    "\14\0\5\12\1\0\1\12\4\0\4\12\1\302\11\12"+
    "\1\0\2\12\2\0\3\12\1\0\2\12\27\0\1\303"+
    "\34\0\5\12\1\0\1\12\4\0\14\12\1\304\1\12"+
    "\1\0\2\12\2\0\3\12\1\0\2\12\37\0\1\305"+
    "\24\0\5\12\1\0\1\12\4\0\16\12\1\0\1\306"+
    "\1\12\2\0\3\12\1\0\2\12\42\0\1\307\21\0"+
    "\5\12\1\0\1\12\4\0\7\12\1\310\6\12\1\0"+
    "\2\12\2\0\3\12\1\0\2\12\32\0\1\311\22\0"+
    "\7\311\5\310\1\311\1\310\4\311\16\310\1\311\2\310"+
    "\2\311\2\310\1\312\1\311\2\310\50\311\1\313\13\311"+
    "\5\310\1\311\1\314\4\311\16\310\1\311\2\310\2\311"+
    "\2\310\1\312\1\311\2\310\16\311\1\315\31\311\1\313"+
    "\13\311\5\310\1\311\1\310\4\311\11\310\1\316\4\310"+
    "\1\311\2\310\2\311\2\310\1\312\1\311\2\310\34\311"+
    "\1\317\13\311\1\313\13\311\5\310\1\311\1\310\4\311"+
    "\11\310\1\320\4\310\1\311\2\310\2\311\2\310\1\312"+
    "\1\311\2\310\34\311\1\321\13\311\1\313\13\311\5\310"+
    "\1\311\1\310\4\311\2\310\1\322\13\310\1\311\2\310"+
    "\2\311\2\310\1\312\1\311\2\310\25\311\1\323\22\311"+
    "\1\313\13\311\5\310\1\311\1\310\4\311\10\310\1\324"+
    "\5\310\1\311\2\310\2\311\2\310\1\312\1\311\2\310"+
    "\33\311\1\325\14\311\1\313\13\311\5\310\1\311\1\326"+
    "\4\311\16\310\1\311\2\310\2\311\2\310\1\312\1\311"+
    "\2\310\16\311\1\327\31\311\1\313\13\311\5\310\1\311"+
    "\1\310\4\311\5\310\1\330\10\310\1\311\2\310\2\311"+
    "\2\310\1\312\1\311\2\310\30\311\1\331\17\311\1\313"+
    "\13\311\5\310\1\311\1\310\4\311\6\310\1\332\7\310"+
    "\1\311\2\310\2\311\2\310\1\312\1\311\2\310\31\311"+
    "\1\333\16\311\1\313\13\311\5\310\1\311\1\334\4\311"+
    "\16\310\1\311\2\310\2\311\2\310\1\312\1\311\2\310"+
    "\16\311\1\335\31\311\1\313\13\311\5\310\1\311\1\310"+
    "\4\311\7\310\1\336\6\310\1\311\2\310\2\311\2\310"+
    "\1\312\1\311\2\310\32\311\1\337\15\311\1\313\13\311"+
    "\5\310\1\311\1\310\4\311\10\310\1\340\5\310\1\311"+
    "\2\310\2\311\2\310\1\312\1\311\2\310\33\311\1\341"+
    "\14\311\1\313\13\311\5\310\1\311\1\310\4\311\4\310"+
    "\1\342\11\310\1\311\2\310\2\311\2\310\1\312\1\311"+
    "\2\310\27\311\1\343\20\311\1\313\13\311\5\310\1\311"+
    "\1\310\4\311\1\310\1\344\14\310\1\311\2\310\2\311"+
    "\2\310\1\312\1\311\2\310\24\311\1\345\23\311\1\313"+
    "\4\311\1\0\3\345\3\0\5\12\1\0\1\12\4\0"+
    "\16\12\1\152\2\12\2\0\3\12\1\345\2\12\2\0"+
    "\3\345\34\0\1\152\7\0\1\345\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9416];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\1\11\26\1\1\0"+
    "\1\1\1\0\1\11\4\0\1\11\21\1\2\0\1\1"+
    "\1\11\2\0\1\11\20\1\1\0\7\1\3\0\10\1"+
    "\1\0\2\1\1\0\3\1\1\11\1\0\12\1\1\0"+
    "\11\1\1\0\10\1\1\0\2\1\2\0\3\1\1\0"+
    "\1\1\1\0\1\1\3\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[229];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public IDb2PlSqlLexer() {
        super();
    }

    private Token token(TokenType type) {
        return new Token(type, yychar, yylength(), yytext());
    }

   /*private void error()
   throws IOException
   {
      throw new IOException("illegal text at line = "+yyline+", column = "+yycolumn+", text = '"+yytext()+"'");
   }*/


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  IDb2PlSqlLexer(java.io.Reader in) {
     
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  IDb2PlSqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1806) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return token(TokenType.KEYWORD);
          }
        case 13: break;
        case 12: 
          { return token(TokenType.IDB2WORDS);
          }
        case 14: break;
        case 2: 
          { return token(TokenType.LINE);
          }
        case 15: break;
        case 9: 
          { return token(TokenType.CHARLITERAL);
          }
        case 16: break;
        case 7: 
          { return token(TokenType.SQLTERMINATOR);
          }
        case 17: break;
        case 4: 
          { return token(TokenType.OPERATOR);
          }
        case 18: break;
        case 5: 
          { return token(TokenType.IDENTIFIER);
          }
        case 19: break;
        case 11: 
          { return token(TokenType.STRING);
          }
        case 20: break;
        case 8: 
          { return token(TokenType.COMMENT);
          }
        case 21: break;
        case 3: 
          { return token(TokenType.WHITESPACE);
          }
        case 22: break;
        case 6: 
          { return token(TokenType.NUMBER);
          }
        case 23: break;
        case 1: 
          { 
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
