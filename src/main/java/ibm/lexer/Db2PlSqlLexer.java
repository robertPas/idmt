/* The following code was generated by JFlex 1.4.3 on 3/29/12 10:21 AM */

/*
 * IBM Corporation
 * Author: vikram.khatri@us.ibm.com
 * 
 */
package ibm.lexer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/29/12 10:21 AM from the specification file
 * <tt>C:/DB2DWB/IDMT/src/ibm/jflex/Db2PlSql.lex</tt>
 */
final class Db2PlSqlLexer extends DefaultLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TRIGGER = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\27\1\3\1\2\1\0\1\3\1\1\16\27\4\0\1\37\1\52"+
    "\1\34\1\52\1\26\1\52\1\0\1\35\1\52\1\52\1\5\1\33"+
    "\1\52\1\6\1\32\1\4\1\30\11\31\1\52\1\20\1\52\1\52"+
    "\1\52\1\52\1\51\1\7\1\17\1\23\1\42\1\12\1\21\1\15"+
    "\1\24\1\14\1\26\1\45\1\10\1\47\1\16\1\22\1\40\1\26"+
    "\1\13\1\41\1\11\1\43\1\44\1\25\1\26\1\50\1\26\1\52"+
    "\1\36\1\52\1\0\1\46\1\0\1\7\1\17\1\23\1\42\1\12"+
    "\1\21\1\15\1\24\1\14\1\26\1\45\1\10\1\47\1\16\1\22"+
    "\1\40\1\26\1\13\1\41\1\11\1\43\1\44\1\25\1\26\1\50"+
    "\1\26\1\52\1\52\1\52\1\52\41\27\2\0\4\26\4\0\1\26"+
    "\2\0\1\27\7\0\1\26\4\0\1\26\5\0\27\26\1\0\37\26"+
    "\1\0\u013f\26\31\0\162\26\4\0\14\26\16\0\5\26\11\0\1\26"+
    "\21\0\130\27\5\0\23\27\12\0\1\26\13\0\1\26\1\0\3\26"+
    "\1\0\1\26\1\0\24\26\1\0\54\26\1\0\46\26\1\0\5\26"+
    "\4\0\202\26\1\0\4\27\3\0\105\26\1\0\46\26\2\0\2\26"+
    "\6\0\20\26\41\0\46\26\2\0\1\26\7\0\47\26\11\0\21\27"+
    "\1\0\27\27\1\0\3\27\1\0\1\27\1\0\2\27\1\0\1\27"+
    "\13\0\33\26\5\0\3\26\15\0\4\27\14\0\6\27\13\0\32\26"+
    "\5\0\13\26\16\27\7\0\12\27\4\0\2\26\1\27\143\26\1\0"+
    "\1\26\10\27\1\0\6\27\2\26\2\27\1\0\4\27\2\26\12\27"+
    "\3\26\2\0\1\26\17\0\1\27\1\26\1\27\36\26\33\27\2\0"+
    "\3\26\60\0\46\26\13\27\1\26\u014f\0\3\27\66\26\2\0\1\27"+
    "\1\26\20\27\2\0\1\26\4\27\3\0\12\26\2\27\2\0\12\27"+
    "\21\0\3\27\1\0\10\26\2\0\2\26\2\0\26\26\1\0\7\26"+
    "\1\0\1\26\3\0\4\26\2\0\1\27\1\26\7\27\2\0\2\27"+
    "\2\0\3\27\11\0\1\27\4\0\2\26\1\0\3\26\2\27\2\0"+
    "\12\27\4\26\15\0\3\27\1\0\6\26\4\0\2\26\2\0\26\26"+
    "\1\0\7\26\1\0\2\26\1\0\2\26\1\0\2\26\2\0\1\27"+
    "\1\0\5\27\4\0\2\27\2\0\3\27\13\0\4\26\1\0\1\26"+
    "\7\0\14\27\3\26\14\0\3\27\1\0\11\26\1\0\3\26\1\0"+
    "\26\26\1\0\7\26\1\0\2\26\1\0\5\26\2\0\1\27\1\26"+
    "\10\27\1\0\3\27\1\0\3\27\2\0\1\26\17\0\2\26\2\27"+
    "\2\0\12\27\1\0\1\26\17\0\3\27\1\0\10\26\2\0\2\26"+
    "\2\0\26\26\1\0\7\26\1\0\2\26\1\0\5\26\2\0\1\27"+
    "\1\26\6\27\3\0\2\27\2\0\3\27\10\0\2\27\4\0\2\26"+
    "\1\0\3\26\4\0\12\27\1\0\1\26\20\0\1\27\1\26\1\0"+
    "\6\26\3\0\3\26\1\0\4\26\3\0\2\26\1\0\1\26\1\0"+
    "\2\26\3\0\2\26\3\0\3\26\3\0\10\26\1\0\3\26\4\0"+
    "\5\27\3\0\3\27\1\0\4\27\11\0\1\27\17\0\11\27\11\0"+
    "\1\26\7\0\3\27\1\0\10\26\1\0\3\26\1\0\27\26\1\0"+
    "\12\26\1\0\5\26\4\0\7\27\1\0\3\27\1\0\4\27\7\0"+
    "\2\27\11\0\2\26\4\0\12\27\22\0\2\27\1\0\10\26\1\0"+
    "\3\26\1\0\27\26\1\0\12\26\1\0\5\26\2\0\1\27\1\26"+
    "\7\27\1\0\3\27\1\0\4\27\7\0\2\27\7\0\1\26\1\0"+
    "\2\26\4\0\12\27\22\0\2\27\1\0\10\26\1\0\3\26\1\0"+
    "\27\26\1\0\20\26\4\0\6\27\2\0\3\27\1\0\4\27\11\0"+
    "\1\27\10\0\2\26\4\0\12\27\22\0\2\27\1\0\22\26\3\0"+
    "\30\26\1\0\11\26\1\0\1\26\2\0\7\26\3\0\1\27\4\0"+
    "\6\27\1\0\1\27\1\0\10\27\22\0\2\27\15\0\60\26\1\27"+
    "\2\26\7\27\4\0\10\26\10\27\1\0\12\27\47\0\2\26\1\0"+
    "\1\26\2\0\2\26\1\0\1\26\2\0\1\26\6\0\4\26\1\0"+
    "\7\26\1\0\3\26\1\0\1\26\1\0\1\26\2\0\2\26\1\0"+
    "\4\26\1\27\2\26\6\27\1\0\2\27\1\26\2\0\5\26\1\0"+
    "\1\26\1\0\6\27\2\0\12\27\2\0\2\26\42\0\1\26\27\0"+
    "\2\27\6\0\12\27\13\0\1\27\1\0\1\27\1\0\1\27\4\0"+
    "\2\27\10\26\1\0\42\26\6\0\24\27\1\0\2\27\4\26\4\0"+
    "\10\27\1\0\44\27\11\0\1\27\71\0\42\26\1\0\5\26\1\0"+
    "\2\26\1\0\7\27\3\0\4\27\6\0\12\27\6\0\6\26\4\27"+
    "\106\0\46\26\12\0\51\26\7\0\132\26\5\0\104\26\5\0\122\26"+
    "\6\0\7\26\1\0\77\26\1\0\1\26\1\0\4\26\2\0\7\26"+
    "\1\0\1\26\1\0\4\26\2\0\47\26\1\0\1\26\1\0\4\26"+
    "\2\0\37\26\1\0\1\26\1\0\4\26\2\0\7\26\1\0\1\26"+
    "\1\0\4\26\2\0\7\26\1\0\7\26\1\0\27\26\1\0\37\26"+
    "\1\0\1\26\1\0\4\26\2\0\7\26\1\0\47\26\1\0\23\26"+
    "\16\0\11\27\56\0\125\26\14\0\u026c\26\2\0\10\26\12\0\32\26"+
    "\5\0\113\26\3\0\3\26\17\0\15\26\1\0\4\26\3\27\13\0"+
    "\22\26\3\27\13\0\22\26\2\27\14\0\15\26\1\0\3\26\1\0"+
    "\2\27\14\0\64\26\40\27\3\0\1\26\3\0\2\26\1\27\2\0"+
    "\12\27\41\0\3\27\2\0\12\27\6\0\130\26\10\0\51\26\1\27"+
    "\126\0\35\26\3\0\14\27\4\0\14\27\12\0\12\27\36\26\2\0"+
    "\5\26\u038b\0\154\26\224\0\234\26\4\0\132\26\6\0\26\26\2\0"+
    "\6\26\2\0\46\26\2\0\6\26\2\0\10\26\1\0\1\26\1\0"+
    "\1\26\1\0\1\26\1\0\37\26\2\0\65\26\1\0\7\26\1\0"+
    "\1\26\3\0\3\26\1\0\7\26\3\0\4\26\2\0\6\26\4\0"+
    "\15\26\5\0\3\26\1\0\7\26\17\0\4\27\32\0\5\27\20\0"+
    "\2\26\23\0\1\26\13\0\4\27\6\0\6\27\1\0\1\26\15\0"+
    "\1\26\40\0\22\26\36\0\15\27\4\0\1\27\3\0\6\27\27\0"+
    "\1\26\4\0\1\26\2\0\12\26\1\0\1\26\3\0\5\26\6\0"+
    "\1\26\1\0\1\26\1\0\1\26\1\0\4\26\1\0\3\26\1\0"+
    "\7\26\3\0\3\26\5\0\5\26\26\0\44\26\u0e81\0\3\26\31\0"+
    "\11\26\6\27\1\0\5\26\2\0\5\26\4\0\126\26\2\0\2\27"+
    "\2\0\3\26\1\0\137\26\5\0\50\26\4\0\136\26\21\0\30\26"+
    "\70\0\20\26\u0200\0\u19b6\26\112\0\u51a6\26\132\0\u048d\26\u0773\0\u2ba4\26"+
    "\u215c\0\u012e\26\2\0\73\26\225\0\7\26\14\0\5\26\5\0\1\26"+
    "\1\27\12\26\1\0\15\26\1\0\5\26\1\0\1\26\1\0\2\26"+
    "\1\0\2\26\1\0\154\26\41\0\u016b\26\22\0\100\26\2\0\66\26"+
    "\50\0\15\26\3\0\20\27\20\0\4\27\17\0\2\26\30\0\3\26"+
    "\31\0\1\26\6\0\5\26\1\0\207\26\2\0\1\27\4\0\1\26"+
    "\13\0\12\27\7\0\32\26\4\0\1\26\1\0\32\26\12\0\132\26"+
    "\3\0\6\26\2\0\6\26\2\0\6\26\2\0\3\26\3\0\2\26"+
    "\3\0\2\26\22\0\3\27\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\3\4\12\5\2\6\1\4"+
    "\1\1\1\4\5\5\1\7\3\5\1\0\1\10\11\5"+
    "\1\11\2\5\1\0\1\6\4\0\1\12\11\5\2\0"+
    "\2\10\14\5\2\0\1\13\11\5\1\0\1\10\17\5"+
    "\1\0\3\5\1\0\10\5\1\14\1\5\1\15\1\5"+
    "\1\0\3\5\1\0\2\5\1\16\1\0\2\5\1\0"+
    "\4\5\2\11\1\0\3\5\1\0\2\5\1\0\2\5"+
    "\1\0\1\5\1\0\4\5\1\0\2\5\1\0\1\5"+
    "\1\0\2\5\1\0\2\5\1\0\1\5\1\0\1\5"+
    "\2\0\3\5\1\0\1\5\2\0\2\5\1\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\2\0\2\5\1\0\2\5\3\0\1\5\2\0\1\5"+
    "\1\0\2\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\2\0\2\5\2\0\2\5\1\11\1\0\1\5\2\0"+
    "\1\5\1\0\1\5\2\0\1\5\1\0\1\17\1\0"+
    "\1\5\2\0\2\5\1\20\2\0\2\5\1\0\1\5"+
    "\2\0\1\5\1\0\1\5\1\21\1\0\1\5\1\17"+
    "\1\0\1\5\2\0\2\5\2\0\2\5\1\0\1\5"+
    "\3\0\1\5\1\0\1\5\1\0\1\5\2\0\1\5"+
    "\1\22\2\0\1\5\1\0\1\23\1\0\1\15\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\22\1\5"+
    "\2\0\1\5\1\23\2\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\20\1\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\2\0\1\5\2\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\22\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\4\22\2\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\1\5\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\254\0\u0102"+
    "\0\u012d\0\254\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387"+
    "\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\254"+
    "\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c"+
    "\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u01ae\0\u0739"+
    "\0\u0764\0\u078f\0\254\0\u0331\0\u07ba\0\u07e5\0\u03dd\0\254"+
    "\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d"+
    "\0\u0968\0\u0993\0\u09be\0\u09e9\0\254\0\u0a14\0\u0a3f\0\u0a6a"+
    "\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2"+
    "\0\u0bed\0\u0c18\0\u0c43\0\254\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef"+
    "\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0993\0\u0e1c"+
    "\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74"+
    "\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc"+
    "\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224"+
    "\0\u124f\0\u127a\0\u12a5\0\u01ae\0\u12d0\0\u01ae\0\u12fb\0\u1326"+
    "\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd\0\u1428\0\u01ae\0\u1453"+
    "\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u1555\0\u1580\0\u15ab"+
    "\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682\0\u16ad\0\u16d8\0\u1703"+
    "\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u185b"+
    "\0\u1886\0\u18b1\0\u18dc\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3"+
    "\0\u19de\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b"+
    "\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38\0\u1c63"+
    "\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb"+
    "\0\u1de6\0\u1e11\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13"+
    "\0\u1f3e\0\u1f69\0\u1f94\0\u1fbf\0\u1fea\0\u2015\0\u2040\0\u206b"+
    "\0\u2096\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d\0\u2198\0\u21c3"+
    "\0\u21ee\0\u2219\0\u2244\0\u226f\0\u229a\0\u22c5\0\u22f0\0\u231b"+
    "\0\u2346\0\u2371\0\u239c\0\u23c7\0\u23f2\0\u241d\0\254\0\u2448"+
    "\0\u2473\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u254a\0\u2575\0\u25a0"+
    "\0\u25cb\0\u25f6\0\u01ae\0\u2621\0\u264c\0\u2677\0\u26a2\0\u26cd"+
    "\0\u26f8\0\u2723\0\u274e\0\u2723\0\u2779\0\u27a4\0\u27cf\0\u27fa"+
    "\0\u2825\0\u2850\0\u287b\0\u28a6\0\u28d1\0\u28fc\0\u2927\0\u2952"+
    "\0\254\0\u297d\0\u29a8\0\u29d3\0\u29fe\0\u2a29\0\u2a54\0\u2a7f"+
    "\0\u2aaa\0\u2ad5\0\u2b00\0\u2b2b\0\u2b56\0\u2b81\0\u2bac\0\u2bd7"+
    "\0\u2c02\0\u2c2d\0\u2c58\0\u2c83\0\u2cae\0\u2cd9\0\u2d04\0\u2d2f"+
    "\0\u01ae\0\u2d5a\0\u2d85\0\u2db0\0\u2ddb\0\u01ae\0\u2e06\0\254"+
    "\0\u2e31\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd\0\u2f08\0\u2f33\0\254"+
    "\0\u2f5e\0\u2f89\0\u2fb4\0\u2fdf\0\254\0\u300a\0\u3035\0\u3060"+
    "\0\u308b\0\u30b6\0\u30e1\0\u310c\0\u3137\0\u3162\0\u318d\0\254"+
    "\0\u31b8\0\u31e3\0\u320e\0\u3239\0\u3264\0\u328f\0\u32ba\0\u32e5"+
    "\0\u3310\0\u333b\0\u3366\0\u3391\0\u33bc\0\u33e7\0\u3412\0\u343d"+
    "\0\u3468\0\u3493\0\u34be\0\u34e9\0\u3514\0\u353f\0\u356a\0\u3595"+
    "\0\u35c0\0\u35eb\0\u3616\0\u3641\0\u366c\0\u3697\0\u36c2\0\u36ed"+
    "\0\u3718\0\u3743\0\u376e\0\u2c83\0\u3799\0\u37c4\0\u37ef\0\u381a"+
    "\0\u3845\0\u3870\0\u389b\0\u38c6\0\u38f1\0\u391c\0\u3947\0\u3972"+
    "\0\u399d\0\u39c8\0\u39f3\0\u3a1e\0\u3a49\0\u3a74\0\u3a9f\0\u3aca"+
    "\0\u3af5\0\u3b20\0\u3b4b\0\u3b76\0\u3ba1\0\u3bcc\0\u3bf7\0\u3c22"+
    "\0\u3c4d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\15\1\17\1\20\2\15\1\21\1\12"+
    "\1\22\1\23\1\24\1\15\1\25\1\15\1\5\1\26"+
    "\1\27\1\30\1\12\1\31\1\32\1\5\1\10\1\33"+
    "\1\34\1\35\1\36\1\37\4\15\2\12\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\15\1\17\1\20\2\15\1\21\1\12\1\22\1\23"+
    "\1\24\1\15\1\25\1\15\1\5\1\26\1\27\1\30"+
    "\1\12\1\31\1\32\1\5\1\10\1\33\1\34\1\35"+
    "\1\36\1\37\4\15\1\40\1\12\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\15"+
    "\1\17\1\20\2\15\1\41\1\12\1\42\1\23\1\24"+
    "\1\15\1\25\1\15\1\5\1\26\1\27\1\30\1\12"+
    "\1\31\1\32\1\5\1\10\1\33\1\34\1\43\1\36"+
    "\1\37\4\15\2\12\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\15\1\17\1\20"+
    "\2\15\1\41\1\12\1\42\1\23\1\24\1\15\1\25"+
    "\1\15\1\5\1\26\1\27\1\30\1\12\1\31\1\32"+
    "\1\5\1\10\1\33\1\34\1\43\1\36\1\37\4\15"+
    "\1\40\1\12\55\0\1\7\53\0\1\10\33\0\1\10"+
    "\20\0\1\44\53\0\1\45\53\0\1\15\1\46\7\15"+
    "\1\0\1\47\10\15\6\0\3\15\1\50\5\15\11\0"+
    "\11\15\1\0\11\15\6\0\11\15\11\0\4\15\1\51"+
    "\4\15\1\0\11\15\6\0\11\15\11\0\3\15\1\52"+
    "\5\15\1\0\1\15\1\53\7\15\6\0\11\15\11\0"+
    "\7\15\1\54\1\15\1\0\11\15\6\0\11\15\11\0"+
    "\3\15\1\55\5\15\1\0\11\15\6\0\11\15\11\0"+
    "\11\15\1\0\1\15\1\56\7\15\6\0\11\15\11\0"+
    "\4\15\1\57\2\15\1\57\1\15\1\0\11\15\6\0"+
    "\11\15\11\0\4\15\1\60\4\15\1\0\11\15\6\0"+
    "\11\15\11\0\5\15\1\61\3\15\1\0\11\15\6\0"+
    "\11\15\14\0\1\62\6\0\1\63\6\0\2\64\1\65"+
    "\32\0\1\62\6\0\1\63\6\0\2\27\1\65\50\0"+
    "\2\65\21\0\1\66\2\0\31\66\1\0\1\66\1\0"+
    "\14\66\1\67\2\0\32\67\1\70\1\0\14\67\7\0"+
    "\4\15\1\71\4\15\1\0\11\15\6\0\11\15\11\0"+
    "\1\72\2\15\1\73\5\15\1\0\11\15\6\0\11\15"+
    "\11\0\3\15\1\74\5\15\1\0\11\15\6\0\11\15"+
    "\11\0\11\15\1\0\11\15\6\0\1\75\10\15\11\0"+
    "\5\15\1\76\3\15\1\0\11\15\6\0\11\15\11\0"+
    "\3\15\1\77\5\15\1\0\11\15\6\0\11\15\11\0"+
    "\11\15\1\0\1\15\1\100\7\15\6\0\11\15\11\0"+
    "\3\15\1\101\5\15\1\0\11\15\6\0\11\15\2\0"+
    "\5\102\1\103\45\102\1\45\1\104\1\105\50\45\7\0"+
    "\2\15\1\106\6\15\1\0\11\15\6\0\11\15\11\0"+
    "\2\15\1\107\6\15\1\0\11\15\6\0\11\15\11\0"+
    "\2\15\1\110\6\15\1\0\11\15\6\0\11\15\11\0"+
    "\5\15\1\111\3\15\1\0\11\15\6\0\11\15\11\0"+
    "\11\15\1\0\11\15\6\0\1\112\10\15\11\0\1\15"+
    "\1\113\7\15\1\0\11\15\6\0\11\15\11\0\11\15"+
    "\1\0\11\15\6\0\1\15\1\114\7\15\11\0\6\15"+
    "\1\115\2\15\1\0\1\116\10\15\6\0\11\15\11\0"+
    "\4\15\1\117\4\15\1\0\11\15\6\0\11\15\11\0"+
    "\3\15\1\120\5\15\1\0\11\15\6\0\11\15\11\0"+
    "\2\15\1\121\6\15\1\0\11\15\6\0\11\15\10\0"+
    "\1\122\21\0\2\123\1\0\1\122\31\0\1\62\6\0"+
    "\1\63\6\0\2\65\21\0\1\66\2\0\31\66\1\124"+
    "\1\66\1\0\14\66\7\0\1\125\10\15\1\0\11\15"+
    "\6\0\11\15\11\0\11\15\1\0\11\15\6\0\4\15"+
    "\1\126\4\15\11\0\2\15\1\127\6\15\1\0\11\15"+
    "\6\0\11\15\11\0\1\15\1\130\7\15\1\0\11\15"+
    "\6\0\11\15\11\0\11\15\1\0\11\15\6\0\2\15"+
    "\1\131\6\15\11\0\3\15\1\132\5\15\1\0\11\15"+
    "\6\0\11\15\11\0\6\15\1\133\2\15\1\0\1\116"+
    "\10\15\6\0\11\15\11\0\4\15\1\134\4\15\1\0"+
    "\11\15\6\0\11\15\11\0\1\15\1\130\7\15\1\0"+
    "\2\15\1\135\6\15\6\0\11\15\2\0\5\102\1\136"+
    "\51\102\1\137\1\136\45\102\2\0\1\105\57\0\3\15"+
    "\1\140\5\15\1\0\11\15\6\0\11\15\11\0\3\15"+
    "\1\141\5\15\1\0\11\15\6\0\11\15\11\0\11\15"+
    "\1\0\3\15\1\142\5\15\6\0\11\15\11\0\6\15"+
    "\1\143\2\15\1\0\11\15\6\0\11\15\11\0\1\15"+
    "\1\144\7\15\1\0\11\15\6\0\11\15\11\0\1\15"+
    "\1\145\7\15\1\0\11\15\6\0\11\15\11\0\2\15"+
    "\1\146\1\147\5\15\1\0\11\15\6\0\11\15\11\0"+
    "\5\15\1\150\3\15\1\0\11\15\6\0\11\15\11\0"+
    "\11\15\1\0\1\15\1\151\7\15\6\0\11\15\11\0"+
    "\11\15\1\0\2\15\1\152\6\15\6\0\11\15\11\0"+
    "\1\153\10\15\1\0\11\15\6\0\11\15\11\0\11\15"+
    "\1\0\3\15\1\154\5\15\6\0\11\15\32\0\2\123"+
    "\42\0\1\63\6\0\2\123\30\0\6\15\1\155\2\15"+
    "\1\0\11\15\6\0\11\15\11\0\3\15\1\156\5\15"+
    "\1\0\11\15\6\0\11\15\3\0\3\157\3\0\2\15"+
    "\1\160\6\15\1\0\11\15\5\0\1\157\11\15\11\0"+
    "\3\15\1\161\5\15\1\0\11\15\6\0\11\15\11\0"+
    "\1\161\10\15\1\0\11\15\6\0\11\15\11\0\11\15"+
    "\1\0\4\15\1\57\4\15\6\0\11\15\11\0\5\15"+
    "\1\162\3\15\1\0\11\15\6\0\11\15\3\0\3\163"+
    "\3\0\3\15\1\164\5\15\1\0\2\15\1\152\6\15"+
    "\5\0\1\163\11\15\11\0\1\15\1\165\7\15\1\0"+
    "\11\15\6\0\11\15\2\0\4\102\1\105\1\136\45\102"+
    "\7\0\4\15\1\166\4\15\1\0\11\15\6\0\11\15"+
    "\11\0\4\15\1\57\4\15\1\0\11\15\6\0\11\15"+
    "\11\0\5\15\1\167\3\15\1\0\11\15\6\0\11\15"+
    "\11\0\6\15\1\107\2\15\1\0\11\15\6\0\11\15"+
    "\11\0\1\170\10\15\1\0\11\15\6\0\11\15\11\0"+
    "\10\15\1\171\1\0\11\15\6\0\11\15\11\0\3\15"+
    "\1\172\5\15\1\0\11\15\6\0\11\15\11\0\4\15"+
    "\1\173\4\15\1\0\11\15\6\0\11\15\11\0\7\15"+
    "\1\174\1\15\1\0\11\15\6\0\11\15\11\0\4\15"+
    "\1\175\4\15\1\0\11\15\6\0\11\15\11\0\3\15"+
    "\1\176\5\15\1\0\11\15\6\0\11\15\11\0\2\15"+
    "\1\177\6\15\1\0\11\15\6\0\11\15\3\0\3\200"+
    "\3\0\4\15\1\201\4\15\1\0\11\15\5\0\1\200"+
    "\11\15\11\0\11\15\1\0\11\15\6\0\7\15\1\202"+
    "\1\15\11\0\11\15\1\0\11\15\6\0\1\203\10\15"+
    "\3\0\3\157\5\0\1\204\25\0\1\157\22\0\4\15"+
    "\1\205\4\15\1\0\11\15\6\0\11\15\11\0\2\15"+
    "\1\206\6\15\1\0\11\15\6\0\11\15\11\0\7\15"+
    "\1\207\1\15\1\0\11\15\6\0\11\15\3\0\3\163"+
    "\6\0\1\210\24\0\1\163\22\0\1\211\10\15\1\0"+
    "\11\15\6\0\11\15\11\0\1\212\10\15\1\0\11\15"+
    "\6\0\11\15\3\0\3\213\3\0\2\15\1\214\6\15"+
    "\1\0\11\15\5\0\1\213\11\15\11\0\11\15\1\0"+
    "\11\15\6\0\2\15\1\215\6\15\11\0\11\15\1\0"+
    "\2\15\1\175\6\15\6\0\11\15\11\0\1\216\10\15"+
    "\1\0\11\15\6\0\11\15\11\0\1\217\10\15\1\0"+
    "\11\15\6\0\11\15\11\0\2\15\1\220\6\15\1\0"+
    "\11\15\6\0\11\15\11\0\3\15\1\57\5\15\1\0"+
    "\11\15\6\0\11\15\11\0\3\15\1\221\5\15\1\0"+
    "\11\15\6\0\11\15\3\0\3\200\7\0\1\222\23\0"+
    "\1\200\22\0\3\15\1\223\5\15\1\0\11\15\6\0"+
    "\11\15\11\0\1\224\10\15\1\0\11\15\6\0\11\15"+
    "\11\0\11\15\1\0\1\15\1\225\7\15\6\0\11\15"+
    "\15\0\1\226\46\0\1\227\10\15\1\0\11\15\6\0"+
    "\11\15\11\0\3\15\1\57\1\15\1\230\3\15\1\0"+
    "\11\15\6\0\11\15\11\0\1\231\52\0\11\15\1\0"+
    "\2\15\1\232\6\15\6\0\11\15\11\0\4\15\1\233"+
    "\4\15\1\0\11\15\6\0\11\15\3\0\3\213\5\0"+
    "\1\234\25\0\1\213\22\0\4\15\1\235\4\15\1\0"+
    "\11\15\6\0\11\15\3\0\3\236\3\0\11\15\1\0"+
    "\2\15\1\237\6\15\5\0\1\236\2\15\1\240\6\15"+
    "\11\0\11\15\1\0\2\15\1\241\6\15\6\0\11\15"+
    "\11\0\11\15\1\0\11\15\6\0\2\15\1\242\6\15"+
    "\11\0\5\15\1\230\3\15\1\0\11\15\6\0\11\15"+
    "\3\0\3\243\3\0\2\15\1\244\6\15\1\0\1\15"+
    "\1\245\7\15\5\0\1\243\11\15\14\0\1\246\47\0"+
    "\1\247\10\15\1\0\11\15\6\0\11\15\3\0\3\250"+
    "\3\0\4\15\1\251\4\15\1\0\11\15\5\0\1\250"+
    "\11\15\11\0\5\15\1\252\3\15\1\0\11\15\6\0"+
    "\11\15\11\0\1\253\52\0\7\15\1\254\1\15\1\0"+
    "\11\15\6\0\11\15\11\0\7\15\1\255\1\15\1\0"+
    "\11\15\6\0\11\15\25\0\1\256\36\0\11\15\1\0"+
    "\3\15\1\257\5\15\6\0\11\15\11\0\3\15\1\207"+
    "\5\15\1\0\11\15\6\0\11\15\15\0\1\260\46\0"+
    "\5\15\1\261\3\15\1\0\11\15\6\0\11\15\3\0"+
    "\3\236\17\0\1\262\13\0\1\236\2\0\1\263\17\0"+
    "\11\15\1\0\11\15\6\0\3\15\1\264\5\15\11\0"+
    "\3\15\1\265\5\15\1\0\11\15\6\0\11\15\11\0"+
    "\11\15\1\0\11\15\6\0\5\15\1\266\3\15\3\0"+
    "\3\267\3\0\11\15\1\0\1\15\1\270\7\15\5\0"+
    "\1\267\11\15\3\0\3\243\5\0\1\271\10\0\1\272"+
    "\14\0\1\243\22\0\4\15\1\273\4\15\1\0\11\15"+
    "\6\0\11\15\11\0\4\15\1\274\4\15\1\0\11\15"+
    "\6\0\11\15\11\0\1\275\52\0\11\15\1\0\11\15"+
    "\6\0\2\15\1\276\6\15\3\0\3\250\7\0\1\277"+
    "\23\0\1\250\22\0\3\15\1\300\5\15\1\0\11\15"+
    "\6\0\11\15\11\0\7\15\1\301\1\15\1\0\11\15"+
    "\6\0\11\15\20\0\1\302\43\0\11\15\1\0\11\15"+
    "\6\0\1\15\1\303\7\15\11\0\6\15\1\57\2\15"+
    "\1\0\11\15\6\0\11\15\26\0\1\304\27\0\3\304"+
    "\3\0\4\15\1\305\4\15\1\0\11\15\5\0\1\304"+
    "\11\15\16\0\1\306\45\0\6\15\1\307\2\15\1\0"+
    "\11\15\6\0\11\15\45\0\1\310\21\0\1\311\47\0"+
    "\4\15\1\312\4\15\1\0\11\15\6\0\11\15\11\0"+
    "\11\15\1\0\1\313\10\15\6\0\11\15\3\0\3\314"+
    "\3\0\2\15\1\315\6\15\1\0\4\15\1\316\4\15"+
    "\5\0\1\314\11\15\3\0\3\267\16\0\1\317\14\0"+
    "\1\267\22\0\11\15\1\0\1\57\10\15\6\0\11\15"+
    "\15\0\1\320\52\0\1\321\46\0\5\15\1\322\3\15"+
    "\1\0\11\15\6\0\11\15\11\0\11\15\1\0\11\15"+
    "\5\0\1\323\11\15\44\0\1\324\11\0\3\324\3\0"+
    "\11\15\1\0\1\15\1\325\7\15\5\0\1\324\11\15"+
    "\14\0\1\326\47\0\11\15\1\0\11\15\6\0\1\15"+
    "\1\327\7\15\11\0\2\15\1\330\6\15\1\0\11\15"+
    "\6\0\11\15\43\0\1\331\20\0\1\332\10\15\1\0"+
    "\11\15\6\0\11\15\3\0\3\304\7\0\1\333\23\0"+
    "\1\304\22\0\11\15\1\0\1\15\1\334\7\15\6\0"+
    "\11\15\17\0\1\335\44\0\6\15\1\336\2\15\1\0"+
    "\11\15\6\0\11\15\15\0\1\337\60\0\1\340\40\0"+
    "\4\15\1\341\4\15\1\0\11\15\6\0\11\15\11\0"+
    "\5\15\1\342\3\15\1\0\11\15\6\0\11\15\3\0"+
    "\3\314\5\0\1\343\13\0\1\344\11\0\1\314\22\0"+
    "\11\15\1\0\1\15\1\345\7\15\6\0\11\15\11\0"+
    "\11\15\1\0\1\15\1\346\7\15\6\0\11\15\23\0"+
    "\1\347\45\0\1\350\75\0\1\323\22\0\6\15\1\351"+
    "\2\15\1\0\11\15\6\0\11\15\15\0\1\352\40\0"+
    "\3\324\16\0\1\353\14\0\1\324\22\0\7\15\1\354"+
    "\1\15\1\0\11\15\6\0\11\15\43\0\1\355\20\0"+
    "\2\15\1\356\6\15\1\0\11\15\6\0\11\15\3\0"+
    "\3\357\3\0\11\15\1\0\11\15\5\0\1\357\11\15"+
    "\11\0\1\360\52\0\11\15\1\0\2\15\1\361\6\15"+
    "\6\0\11\15\24\0\1\362\37\0\11\15\1\0\4\15"+
    "\1\363\4\15\6\0\11\15\17\0\1\364\44\0\3\15"+
    "\1\365\5\15\1\0\11\15\6\0\11\15\15\0\1\366"+
    "\53\0\1\367\45\0\3\15\1\370\5\15\1\0\11\15"+
    "\6\0\11\15\11\0\7\15\1\371\1\15\1\0\11\15"+
    "\6\0\11\15\24\0\1\372\52\0\1\373\31\0\3\374"+
    "\3\0\11\15\1\0\11\15\5\0\1\374\1\15\1\375"+
    "\7\15\11\0\4\15\1\376\4\15\1\0\11\15\6\0"+
    "\11\15\17\0\1\377\44\0\6\15\1\u0100\2\15\1\0"+
    "\11\15\6\0\11\15\14\0\1\u0101\56\0\1\u0102\43\0"+
    "\1\15\1\u0103\7\15\1\0\11\15\6\0\11\15\13\0"+
    "\1\u0104\50\0\4\15\1\u0105\4\15\1\0\11\15\6\0"+
    "\11\15\3\0\3\357\3\0\11\u0106\1\0\6\u0106\10\0"+
    "\1\357\11\u0106\25\0\1\u0107\36\0\2\15\1\u0108\6\15"+
    "\1\0\11\15\6\0\11\15\27\0\1\u0109\37\0\1\u010a"+
    "\47\0\4\15\1\u010b\4\15\1\0\11\15\6\0\11\15"+
    "\14\0\1\u010c\56\0\1\u010d\43\0\7\15\1\u010e\1\15"+
    "\1\0\11\15\6\0\11\15\11\0\3\15\1\u010f\5\15"+
    "\1\0\11\15\6\0\11\15\3\0\3\374\33\0\1\374"+
    "\1\0\1\u0110\24\0\1\u0111\46\0\1\u0112\10\15\1\0"+
    "\11\15\6\0\11\15\11\0\11\15\1\0\11\15\6\0"+
    "\5\15\1\u0113\3\15\17\0\1\u0114\44\0\3\15\1\u0115"+
    "\5\15\1\0\11\15\6\0\11\15\42\0\1\u0116\22\0"+
    "\1\u0117\51\0\11\15\1\0\11\15\6\0\10\15\1\176"+
    "\15\0\1\u0118\46\0\5\15\1\u0119\3\15\1\0\11\15"+
    "\6\0\11\15\11\0\11\u0106\1\0\11\u0106\6\0\11\u0106"+
    "\13\0\1\u011a\50\0\5\15\1\u011b\3\15\1\0\11\15"+
    "\6\0\11\15\15\0\1\u011c\37\0\2\u011c\1\0\4\u011c"+
    "\3\u010b\1\u011d\5\u010b\1\u011c\11\u010b\6\u011c\11\u010b\2\u011c"+
    "\16\0\1\u011e\46\0\1\u011f\47\0\2\15\1\u0120\6\15"+
    "\1\0\11\15\6\0\11\15\11\0\4\15\1\u0121\4\15"+
    "\1\0\11\15\6\0\11\15\11\0\1\u0122\110\0\1\u0123"+
    "\14\0\11\15\1\0\11\15\6\0\4\15\1\u0124\4\15"+
    "\3\0\3\u0123\3\0\11\15\1\0\11\15\5\0\1\u0123"+
    "\11\15\14\0\1\u0125\47\0\4\15\1\u0126\4\15\1\0"+
    "\11\15\6\0\11\15\12\0\1\u0127\112\0\1\u0128\16\0"+
    "\1\u0129\45\0\11\15\1\0\2\15\1\u012a\6\15\6\0"+
    "\11\15\16\0\1\u012b\45\0\11\15\1\0\1\15\1\u012c"+
    "\7\15\6\0\11\15\2\0\2\u011c\1\0\7\u011c\1\u012d"+
    "\42\u011c\1\0\4\u011c\3\u010b\1\u011d\3\u010b\1\u012e\1\u010b"+
    "\1\u011c\11\u010b\6\u011c\11\u010b\2\u011c\11\0\1\u012f\54\0"+
    "\1\u0130\46\0\11\15\1\0\11\15\6\0\6\15\1\u0131"+
    "\2\15\46\0\1\u0132\7\0\3\u0123\5\0\1\u0133\25\0"+
    "\1\u0123\22\0\3\15\1\u0134\5\15\1\0\11\15\6\0"+
    "\11\15\15\0\1\u0135\46\0\1\u0136\66\0\1\u0137\36\0"+
    "\2\15\1\u0138\6\15\1\0\11\15\6\0\11\15\24\0"+
    "\1\u0139\37\0\7\15\1\u013a\1\15\1\0\11\15\6\0"+
    "\11\15\2\0\2\u011c\1\0\7\u011c\1\u012d\3\u011c\1\u013b"+
    "\36\u011c\1\0\4\u011c\1\u013c\2\u010b\1\u011d\5\u010b\1\u011c"+
    "\11\u010b\6\u011c\11\u010b\2\u011c\46\0\1\u013d\13\0\11\15"+
    "\1\0\11\15\6\0\3\15\1\u013e\5\15\14\0\1\u013f"+
    "\62\0\1\u0140\37\0\11\15\1\0\11\15\6\0\1\u0141"+
    "\10\15\25\0\1\u0142\40\0\1\u0143\50\0\11\15\1\0"+
    "\11\15\6\0\6\15\1\u0144\2\15\20\0\1\u0145\35\0"+
    "\3\u0145\3\0\11\15\1\0\11\15\5\0\1\u0145\3\15"+
    "\1\u0146\5\15\2\0\2\u011c\1\0\4\u011c\1\u0147\2\u011c"+
    "\1\u012d\42\u011c\1\0\4\u011c\3\u010b\1\u011d\4\u010b\1\u0148"+
    "\1\u011c\11\u010b\6\u011c\11\u010b\2\u011c\43\0\1\u0149\16\0"+
    "\11\15\1\0\11\15\6\0\1\15\1\371\7\15\42\0"+
    "\1\u014a\21\0\11\15\1\0\1\15\1\u014b\7\15\6\0"+
    "\11\15\14\0\1\u014c\106\0\1\u014d\13\0\4\15\1\u014e"+
    "\4\15\1\0\11\15\6\0\11\15\3\0\3\u0145\33\0"+
    "\1\u0145\3\0\1\u014f\16\0\11\15\1\0\11\15\6\0"+
    "\1\15\1\u0150\7\15\2\0\2\u011c\1\0\7\u011c\1\u012d"+
    "\4\u011c\1\u0151\35\u011c\1\0\4\u011c\1\u010b\1\u0152\1\u010b"+
    "\1\u011d\5\u010b\1\u011c\11\u010b\6\u011c\11\u010b\2\u011c\41\0"+
    "\1\u010d\33\0\1\u0153\37\0\5\15\1\u0154\3\15\1\0"+
    "\11\15\6\0\11\15\3\0\3\u014c\5\0\1\271\25\0"+
    "\1\u014c\26\0\1\u0155\46\0\3\15\1\u0156\5\15\1\0"+
    "\11\15\6\0\11\15\43\0\1\u0157\20\0\3\15\1\u0158"+
    "\5\15\1\0\11\15\6\0\11\15\2\0\2\u011c\1\0"+
    "\5\u011c\1\u0159\1\u011c\1\u012d\42\u011c\1\0\4\u011c\3\u010b"+
    "\1\u015a\5\u010b\1\u011c\11\u010b\6\u011c\11\u010b\2\u011c\14\0"+
    "\1\u015b\45\0\7\15\1\u015c\1\15\1\0\11\15\6\0"+
    "\11\15\14\0\1\u015d\47\0\11\15\1\0\1\u015e\10\15"+
    "\6\0\11\15\14\0\1\u015f\41\0\3\u015f\3\0\4\15"+
    "\1\u0160\4\15\1\0\11\15\5\0\1\u015f\11\15\2\0"+
    "\2\u011c\1\0\7\u011c\1\u0161\41\u011c\1\u0162\1\u0163\1\u0162"+
    "\3\u011c\3\u010b\1\u011d\3\u010b\1\u012e\1\u010b\1\u0164\11\u010b"+
    "\5\u011c\1\u0162\11\u010b\2\u011c\16\0\1\u0165\43\0\2\15"+
    "\1\57\6\15\1\0\11\15\6\0\11\15\23\0\1\u0166"+
    "\40\0\3\15\1\u0167\5\15\1\0\11\15\6\0\11\15"+
    "\3\0\3\u015f\7\0\1\u0168\23\0\1\u015f\22\0\11\15"+
    "\1\0\1\15\1\u0169\7\15\6\0\11\15\2\0\1\u011c"+
    "\1\u0162\1\u0163\1\u0162\6\u011c\1\u012d\3\u011c\1\u013b\1\u011c"+
    "\1\u0164\16\u011c\1\u0162\14\u011c\1\u0162\1\u0163\1\u0162\6\u011c"+
    "\1\u012d\5\u011c\1\u0164\16\u011c\1\u0162\13\u011c\1\0\3\u0163"+
    "\14\0\1\u0130\16\0\1\u0163\24\0\1\347\53\0\1\u016a"+
    "\47\0\4\15\1\u016b\4\15\1\0\11\15\6\0\11\15"+
    "\24\0\1\u016c\37\0\1\15\1\u016d\7\15\1\0\11\15"+
    "\6\0\11\15\15\0\1\u016e\46\0\3\15\1\u016f\5\15"+
    "\1\0\11\15\6\0\11\15\12\0\1\u0170\51\0\1\15"+
    "\1\u0171\7\15\1\0\11\15\6\0\11\15\14\0\1\u0172"+
    "\47\0\7\15\1\u0173\1\15\1\0\11\15\6\0\11\15"+
    "\12\0\1\u0174\51\0\10\15\1\u0175\1\0\11\15\6\0"+
    "\11\15\20\0\1\u0176\43\0\11\15\1\0\2\15\1\u0177"+
    "\6\15\6\0\11\15\21\0\1\u0178\42\0\1\u0179\10\15"+
    "\1\0\11\15\6\0\11\15\25\0\1\u017a\36\0\3\15"+
    "\1\u017b\5\15\1\0\11\15\6\0\11\15\11\0\1\u017c"+
    "\52\0\11\15\1\0\2\15\1\u017d\6\15\6\0\11\15"+
    "\14\0\1\u017e\47\0\11\15\1\0\11\15\6\0\1\15"+
    "\1\u017f\7\15\25\0\1\u0180\36\0\11\15\1\0\11\15"+
    "\6\0\5\15\1\u017f\3\15\43\0\1\u0181\11\0\7\u0181"+
    "\11\u017f\1\u0130\11\u017f\6\u0181\11\u017f\2\u0181\45\0\1\u0181"+
    "\5\0\20\u0181\1\u0130\32\u0181";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\2\1\1\11\25\1\1\11"+
    "\3\1\1\0\15\1\1\0\1\11\4\0\1\11\11\1"+
    "\2\0\1\1\1\11\14\1\2\0\1\11\11\1\1\0"+
    "\20\1\1\0\3\1\1\0\14\1\1\0\3\1\1\0"+
    "\3\1\1\0\2\1\1\0\6\1\1\0\3\1\1\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\0\4\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\2\0\3\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\2\1\1\0\2\1\3\0"+
    "\1\1\2\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\2\1\2\0\2\1\1\11"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\3\1\2\0\2\1"+
    "\1\0\1\1\2\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\11\1\0\1\1\2\0\2\1\2\0\2\1\1\0"+
    "\1\1\3\0\1\1\1\0\1\1\1\0\1\1\2\0"+
    "\2\1\2\0\1\1\1\0\1\1\1\0\1\11\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\11\1\1"+
    "\2\0\1\1\1\11\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\11\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\1\2\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\5\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[385];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private boolean isRowTrigger = false;
    public Db2PlSqlLexer() {
        super();
    }

    private Token token(TokenType type) {
        return new Token(type, yychar, yylength(), yytext());
    }

    private Token token(TokenType type, String txt) {
        return new Token(type, yychar, yylength(), txt);
    }

   /*private void error()
   throws IOException
   {
      throw new IOException("illegal text at line = "+yyline+", column = "+yycolumn+", text = '"+yytext()+"'");
   }*/


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Db2PlSqlLexer(java.io.Reader in) {
     
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Db2PlSqlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1810) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { yybegin(TRIGGER);
                                   return token(TokenType.KEYWORD);
          }
        case 20: break;
        case 16: 
          { return token(TokenType.MODIFIED,
                                         yytext() + " SAVEPOINT ");
          }
        case 21: break;
        case 9: 
          { return token(TokenType.KEYWORD);
          }
        case 22: break;
        case 6: 
          { return token(TokenType.NUMBER);
          }
        case 23: break;
        case 4: 
          { return token(TokenType.OPERATOR);
          }
        case 24: break;
        case 12: 
          { return token(TokenType.BODY);
          }
        case 25: break;
        case 2: 
          { return token(TokenType.LINE);
          }
        case 26: break;
        case 10: 
          { return token(TokenType.CHARLITERAL);
          }
        case 27: break;
        case 15: 
          { isRowTrigger = true; 
                                   return token(TokenType.KEYWORD);
          }
        case 28: break;
        case 14: 
          { yybegin(YYINITIAL);
                                   if (isRowTrigger == false)
                                   {
                                      return token(TokenType.KEYWORD, "\nFOR EACH STATEMENT\n" + yytext()); 
                                   }
                                   return token(TokenType.KEYWORD);
          }
        case 29: break;
        case 11: 
          { return token(TokenType.STRING);
          }
        case 30: break;
        case 3: 
          { return token(TokenType.WHITESPACE);
          }
        case 31: break;
        case 5: 
          { return token(TokenType.IDENTIFIER);
          }
        case 32: break;
        case 13: 
          { /* Do nothing and skip writing token */
          }
        case 33: break;
        case 17: 
          { return token(TokenType.MODIFIED,
                                         yytext() + " ON ROLLBACK RETAIN CURSORS");
          }
        case 34: break;
        case 7: 
          { return token(TokenType.SQLTERMINATOR);
          }
        case 35: break;
        case 18: 
          { return token(TokenType.COMMENTEDTEXT, "/* " + yytext() + " */");
          }
        case 36: break;
        case 8: 
          { return token(TokenType.COMMENT);
          }
        case 37: break;
        case 1: 
          { 
          }
        case 38: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
